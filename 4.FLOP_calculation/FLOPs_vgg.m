function [p_per, f_per] = FLOPs_vgg(name_flod)

    for i = 1:13
        name = [name_flod '/FM' num2str(i) '.txt'];
        a = load(name);
        l(i) = length(a);
    end

    p_ori = (3*64*3*3 + 64*64*3*3 + 64*128*3*3 + 128*128*3*3 + 128*256*3*3 + ...
        256*256*3*3 + 256*256*3*3 + 256*512*3*3 + 512*512*3*3 + 512*512*3*3 + ...
        512*512*3*3 + 512*512*3*3 + 512*512*3*3 + 512*512 + 512*10)/10^6;

    p_cur = (3*(64-l(1))*3*3 + (64-l(1))*(64-l(2))*3*3 + (64-l(2))*(128-l(3))*3*3 + (128-l(3))*(128-l(4))*3*3 + (128-l(4))*(256-l(5))*3*3 + ...
        (256-l(5))*(256-l(6))*3*3 + (256-l(6))*(256-l(7))*3*3 + (256-l(7))*(512-l(8))*3*3 + (512-l(8))*(512-l(9))*3*3 + (512-l(9))*(512-l(10))*3*3 + ...
        (512-l(10))*(512-l(11))*3*3 + (512-l(11))*(512-l(12))*3*3 + (512-l(12))*(512-l(13))*3*3 + (512-l(13))*512 + 512*10)/10^6;

    p_per = (p_ori - p_cur)/p_ori;

    f_ori = (3*64*3*3 * 32*32 + 64*64*3*3 * 32*32 + 64*128*3*3 * 16*16 + 128*128*3*3 * 16*16 + 128*256*3*3 * 8*8 + ...
        256*256*3*3 * 8*8 + 256*256*3*3 * 8*8 + 256*512*3*3 * 4*4 + 512*512*3*3 * 4*4 + 512*512*3*3 * 4*4 + ...
        512*512*3*3 * 2*2 + 512*512*3*3 * 2*2 + 512*512*3*3 * 2*2 + 512*512 + 512*10)/10^6;

    f_cur = (3*(64-l(1))*3*3 * 32*32 + (64-l(1))*(64-l(2))*3*3 * 32*32 + (64-l(2))*(128-l(3))*3*3 * 16*16 + (128-l(3))*(128-l(4))*3*3 * 16*16 + (128-l(4))*(256-l(5))*3*3 * 8*8 + ...
        (256-l(5))*(256-l(6))*3*3 * 8*8 + (256-l(6))*(256-l(7))*3*3 * 8*8 + (256-l(7))*(512-l(8))*3*3 * 4*4 + (512-l(8))*(512-l(9))*3*3 * 4*4 + (512-l(9))*(512-l(10))*3*3 * 4*4 + ...
        (512-l(10))*(512-l(11))*3*3 * 2*2 + (512-l(11))*(512-l(12))*3*3 * 2*2 + (512-l(12))*(512-l(13))*3*3 * 2*2 + (512-l(13))*512 + 512*10)/10^6;

    f_per = (f_ori - f_cur)/f_ori;

    fprintf('VGG-16:\n Parameter --- Ori: %.2fM, Cur: %.2fM, Rate: %.3f; \n FLOPs --- Ori: %.2fM, Cur: %.2fM, Rate: %.3f; \n', p_ori, p_cur, p_per, f_ori, f_cur, f_per);

end