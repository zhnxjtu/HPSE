function [p_per, f_per] = FLOPs_res56(name_flod)


    for i = 1:54
        name = [name_flod '/FM' num2str(i) '.txt'];
        a = load(name);
        l(i) = length(a);
    end

    p_ori = (3*16*3*3 + ...
        16*16*3*3 + 16*16*3*3 + 16*16*3*3 + 16*16*3*3 + 16*16*3*3 + 16*16*3*3 + 16*16*3*3 + 16*16*3*3 + ...
        16*16*3*3 + 16*16*3*3 + 16*16*3*3 + 16*16*3*3 + 16*16*3*3 + 16*16*3*3 + 16*16*3*3 + 16*16*3*3 + ...
        16*16*3*3 + 16*16*3*3 + ...
        16*32*3*3 + 32*32*3*3 + 32*32*3*3 + 32*32*3*3 + 32*32*3*3 + 32*32*3*3 + 32*32*3*3 + 32*32*3*3 + ...
        32*32*3*3 + 32*32*3*3 + 32*32*3*3 + 32*32*3*3 + 32*32*3*3 + 32*32*3*3 + 32*32*3*3 + 32*32*3*3 + ...
        32*32*3*3 + 32*32*3*3 + ...
        32*64*3*3 + 64*64*3*3 + 64*64*3*3 + 64*64*3*3 + 64*64*3*3 + 64*64*3*3 + 64*64*3*3 + 64*64*3*3 + ...
        64*64*3*3 + 64*64*3*3 + 64*64*3*3 + 64*64*3*3 + 64*64*3*3 + 64*64*3*3 + 64*64*3*3 + 64*64*3*3 + ...
        64*64*3*3 + 64*64*3*3 + ...
        64*10)/10^6;

    p_cur = (3*16*3*3 + ...
        16*(16-l(1))*3*3 + (16-l(1))*(16-l(2))*3*3 + (16-l(2))*(16-l(3))*3*3 + (16-l(3))*(16-l(4))*3*3 + ...
        (16-l(4))*(16-l(5))*3*3 + (16-l(5))*(16-l(6))*3*3 + (16-l(6))*(16-l(7))*3*3 + (16-l(7))*(16-l(8))*3*3 + ...
        (16-l(8))*(16-l(9))*3*3 + (16-l(9))*(16-l(10))*3*3 + (16-l(10))*(16-l(11))*3*3 + (16-l(11))*(16-l(12))*3*3 + ...
        (16-l(12))*(16-l(13))*3*3 + (16-l(13))*(16-l(14))*3*3 + (16-l(14))*(16-l(15))*3*3 + (16-l(15))*(16-l(16))*3*3 + ...
        (16-l(16))*(16-l(17))*3*3 + (16-l(17))*(16-l(18))*3*3 + ...
        (16-l(18))*(32-l(19))*3*3 + (32-l(19))*(32-l(20))*3*3 + (32-l(20))*(32-l(21))*3*3 + (32-l(21))*(32-l(22))*3*3 + ...
        (32-l(22))*(32-l(23))*3*3 + (32-l(23))*(32-l(24))*3*3 + (32-l(24))*(32-l(25))*3*3 + (32-l(25))*(32-l(26))*3*3 + ...
        (32-l(26))*(32-l(27))*3*3 + (32-l(27))*(32-l(28))*3*3 + (32-l(28))*(32-l(29))*3*3 + (32-l(29))*(32-l(30))*3*3 + ...
        (32-l(30))*(32-l(31))*3*3 + (32-l(31))*(32-l(32))*3*3 + (32-l(32))*(32-l(33))*3*3 + (32-l(33))*(32-l(34))*3*3 + ...
        (32-l(34))*(32-l(35))*3*3 + (32-l(35))*(32-l(36))*3*3 + ...
        (32-l(36))*(64-l(37))*3*3 + (64-l(37))*(64-l(38))*3*3 + (64-l(38))*(64-l(39))*3*3 + (64-l(39))*(64-l(40))*3*3 + ...
        (64-l(40))*(64-l(41))*3*3 + (64-l(41))*(64-l(42))*3*3 + (64-l(42))*(64-l(43))*3*3 + (64-l(43))*(64-l(44))*3*3 + ...
        (64-l(44))*(64-l(45))*3*3 + (64-l(45))*(64-l(46))*3*3 + (64-l(46))*(64-l(47))*3*3 + (64-l(47))*(64-l(48))*3*3 + ...
        (64-l(48))*(64-l(49))*3*3 + (64-l(49))*(64-l(50))*3*3 + (64-l(50))*(64-l(51))*3*3 + (64-l(51))*(64-l(52))*3*3 + ...
        (64-l(52))*(64-l(53))*3*3 + (64-l(53))*(64-l(54))*3*3 + ...
        (64-l(54))*10)/10^6;

    p_per = (p_ori - p_cur)/p_ori;

    f_ori = ((3*16*3*3 + ...
        16*16*3*3 + 16*16*3*3 + 16*16*3*3 + 16*16*3*3 + 16*16*3*3 + 16*16*3*3 + 16*16*3*3 + 16*16*3*3 + ...
        16*16*3*3 + 16*16*3*3 + 16*16*3*3 + 16*16*3*3 + 16*16*3*3 + 16*16*3*3 + 16*16*3*3 + 16*16*3*3 + ...
        16*16*3*3 + 16*16*3*3)*32*32 + ...
        (16*32*3*3 + 32*32*3*3 + 32*32*3*3 + 32*32*3*3 + 32*32*3*3 + 32*32*3*3 + 32*32*3*3 + 32*32*3*3 + ...
        32*32*3*3 + 32*32*3*3 + 32*32*3*3 + 32*32*3*3 + 32*32*3*3 + 32*32*3*3 + 32*32*3*3 + 32*32*3*3 + ...
        32*32*3*3 + 32*32*3*3)*16*16 + ...
        (32*64*3*3 + 64*64*3*3 + 64*64*3*3 + 64*64*3*3 + 64*64*3*3 + 64*64*3*3 + 64*64*3*3 + 64*64*3*3 + ...
        64*64*3*3 + 64*64*3*3 + 64*64*3*3 + 64*64*3*3 + 64*64*3*3 + 64*64*3*3 + 64*64*3*3 + 64*64*3*3 + ...
        64*64*3*3 + 64*64*3*3)*8*8 + ...
        64*10)/10^6;

    f_cur = ((3*16*3*3 + ...
        16*(16-l(1))*3*3 + (16-l(1))*(16-l(2))*3*3 + (16-l(2))*(16-l(3))*3*3 + (16-l(3))*(16-l(4))*3*3 + ...
        (16-l(4))*(16-l(5))*3*3 + (16-l(5))*(16-l(6))*3*3 + (16-l(6))*(16-l(7))*3*3 + (16-l(7))*(16-l(8))*3*3 + ...
        (16-l(8))*(16-l(9))*3*3 + (16-l(9))*(16-l(10))*3*3 + (16-l(10))*(16-l(11))*3*3 + (16-l(11))*(16-l(12))*3*3 + ...
        (16-l(12))*(16-l(13))*3*3 + (16-l(13))*(16-l(14))*3*3 + (16-l(14))*(16-l(15))*3*3 + (16-l(15))*(16-l(16))*3*3 + ...
        (16-l(16))*(16-l(17))*3*3 + (16-l(17))*(16-l(18))*3*3)*32*32 + ...
        ((16-l(18))*(32-l(19))*3*3 + (32-l(19))*(32-l(20))*3*3 + (32-l(20))*(32-l(21))*3*3 + (32-l(21))*(32-l(22))*3*3 + ...
        (32-l(22))*(32-l(23))*3*3 + (32-l(23))*(32-l(24))*3*3 + (32-l(24))*(32-l(25))*3*3 + (32-l(25))*(32-l(26))*3*3 + ...
        (32-l(26))*(32-l(27))*3*3 + (32-l(27))*(32-l(28))*3*3 + (32-l(28))*(32-l(29))*3*3 + (32-l(29))*(32-l(30))*3*3 + ...
        (32-l(30))*(32-l(31))*3*3 + (32-l(31))*(32-l(32))*3*3 + (32-l(32))*(32-l(33))*3*3 + (32-l(33))*(32-l(34))*3*3 + ...
        (32-l(34))*(32-l(35))*3*3 + (32-l(35))*(32-l(36))*3*3)*16*16 + ...
        ((32-l(36))*(64-l(37))*3*3 + (64-l(37))*(64-l(38))*3*3 + (64-l(38))*(64-l(39))*3*3 + (64-l(39))*(64-l(40))*3*3 + ...
        (64-l(40))*(64-l(41))*3*3 + (64-l(41))*(64-l(42))*3*3 + (64-l(42))*(64-l(43))*3*3 + (64-l(43))*(64-l(44))*3*3 + ...
        (64-l(44))*(64-l(45))*3*3 + (64-l(45))*(64-l(46))*3*3 + (64-l(46))*(64-l(47))*3*3 + (64-l(47))*(64-l(48))*3*3 + ...
        (64-l(48))*(64-l(49))*3*3 + (64-l(49))*(64-l(50))*3*3 + (64-l(50))*(64-l(51))*3*3 + (64-l(51))*(64-l(52))*3*3 + ...
        (64-l(52))*(64-l(53))*3*3 + (64-l(53))*(64-l(54))*3*3)*8*8 + ...
        (64-l(54))*10)/10^6;

    f_per = (f_ori - f_cur)/f_ori;

    fprintf('ResNet-56: \n Parameter --- Ori: %.2fM, Cur: %.2fM, Rate: %.3f; \n FLOPs --- Ori: %.2fM, Cur: %.2fM, Rate: %.3f; \n', p_ori, p_cur, p_per, f_ori, f_cur, f_per);

end